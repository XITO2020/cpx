// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") 
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  image           String?
  email           String?         @unique
  emailVerified   Boolean         @default(false)
  hashedPassword  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isPremium       Boolean         @default(true)
  githubId        String?
  favoriteIds     String[]        @db.ObjectId
  sessions        Session[]
  account         Account[]
  comments        Comment[]
  premiumDuration Int?
  admin           Boolean        @default(false)
  linkedArticles  LinkedArticle[]
  favoriteMovies  Movie[]        @relation("UserFavoriteMovies")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  SessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Movie {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  videoUrl        String
  genre           String?
  language        String?
  author          String?
  thumbnailUrl    String?
  duration        String?
  year            Int?
  rating          Float?
  description     String?
  favoriteLength  Int
  views           Int
  linkedArticle   String?
  isTrending      Boolean
  isPremium       Boolean
  comments        Comment[]
  linkedArticles  LinkedArticle[]
  favoriteUsers   User[]         @relation("UserFavoriteMovies")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  date      DateTime @default(now())
  likes     Int
  dislikes  Int
  ambiguous Int
  best      Boolean
  // Define fields to store User and Movie IDs
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  // Relations to User and Movie
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model LinkedArticle {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime @default(now())
  userId      String   @db.ObjectId
  movieId     String   @db.ObjectId
  imageOne    String
  imageTwo    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie       Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
}
